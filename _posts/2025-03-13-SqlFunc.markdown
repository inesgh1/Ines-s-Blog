# Cheat Sheet: Problems, Fixes, Trigger Comparison, and Implementation Details

## Problems Encountered and Fixes

| **Problem**                              | **Symptoms**                                                                 | **Root Cause**                                                                 | **Fix**                                                                                           | **Impact**                              |
|------------------------------------------|-----------------------------------------------------------------------------|-------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|-----------------------------------------|
| **JSON Parsing Issue (Operation vs. operation)** | Logs showed "Change missing 'operation' field" despite valid data.           | SQL trigger sent `"Operation"` (uppercase) while code expected `"operation"` (lowercase). | Updated code to handle both `"operation"` and `"Operation"` using `change.get("operation") or change.get("Operation")`. | Enabled message processing by fixing the JSON parsing mismatch. |
| **Infinite Loop / Messages Not Processed** | Function appeared to wait indefinitely, processing no messages.             | Early exit due to JSON parsing failure prevented further execution.           | Ensured proper JSON parsing and added a check for empty `changes_list` to avoid unnecessary loops. | Allowed real-time processing of new messages as they arrive. |
| **Sender Filtering Not Working**          | Processed messages from `sender = 'assistant'` and others, not just `'user'`.| In-code filtering (`if sender != "user"`) wasn’t reached due to parsing issue; no database-level filter. | Strengthened in-code check with strict `sender != "user"` and added logging to verify sender values. | Ensured only `sender = 'user'` messages are processed. |
| **FHIR Observation Not Sent**             | No FHIR-related logs; mood analysis and upload never executed.              | Processing halted early, preventing FHIR logic execution; potential server issues. | Fixed parsing to reach FHIR steps; added detailed logging and verified `FHIR_SERVER_URL`/`TOKEN`. | Enabled mood analysis and FHIR upload for qualifying messages. |
| **FHIR Server Blocking**                  | "Sorry, you have been blocked" error (Cloudflare).                         | Incorrect `FHIR_SERVER_URL` (e.g., `http://3.142.231.50:80`) or invalid `FHIR_AUTH_TOKEN`. | Recommended using a valid HTTPS URL and testing manually with `curl`.                            | Resolved once environment variables are corrected. |
| **Page Not Found**                        | "Not Found" error (Apache server).                                         | `FHIR_SERVER_URL` pointed to an invalid endpoint.                            | Suggested verifying and updating `FHIR_SERVER_URL` to a working FHIR server endpoint.            | Ensured correct server communication.  |

## Differences Between Timer Trigger and SQL Trigger

| **Aspect**            | **Timer Trigger**                                   | **SQL Trigger**                                     |
|-----------------------|----------------------------------------------------|----------------------------------------------------|
| **Trigger Mechanism** | Executes on a scheduled interval (e.g., every 5s). | Executes on changes to a specified SQL table (e.g., `dbo.messages`). |
| **Event Source**      | Time-based (cron schedule).                        | Data-based (INSERT, UPDATE, DELETE on table).      |
| **Processing Style**  | Polls for new data (e.g., latest unprocessed message). | Reacts immediately to each change event.           |
| **Use Case**          | Periodic tasks (e.g., checking for updates).       | Real-time data processing (e.g., mood analysis on new messages). |
| **Parameter**         | `func.TimerRequest` (contains schedule info).      | `str` (JSON string of changes).                    |
| **Scalability**       | Less reactive; depends on polling frequency.       | Highly reactive; scales with database change rate. |
| **Complexity**        | Simpler for periodic tasks; manual data fetch needed (e.g., `get_latest_user_message`). | More complex due to handling multiple change events; requires JSON parsing. |

- **Key Difference**: The timer trigger is proactive and periodic, requiring custom logic to fetch new data (e.g., `get_latest_user_message`), while the SQL trigger is reactive and event-driven, processing changes as they occur. Your requirement for simultaneous processing favors the SQL trigger.

## Necessary Files, Parameters, and Coding Details

### Necessary Files

1. **`function_app.py`**:
   - Main file containing the Azure Function definition.
   - Includes imports, environment variables, helper functions (`analyze_patient_mood`, `create_fhir_observation`, `send_to_fhir`), and the trigger function (`chat_with_knowbot_sql_trigger`).
   - **Example Structure**:
     ```python
     import azure.functions as func
     # ... other imports ...
     app = func.FunctionApp()
     @app.sql_trigger(arg_name="changes", table_name="dbo.messages", connection_string_setting="SqlConnectionString")
     def chat_with_knowbot_sql_trigger(changes: str) -> None:
         # Function logic
     ```

2. **`.env` or `local.settings.json`**:
   - Stores environment variables for secure configuration.
   - **Example `.env`**:
     ```
     AZURE_OPENAI_ENDPOINT=https://your-openai-endpoint
     AZURE_OPENAI_API_KEY=your-api-key
     AZURE_API_VERSION=2024-02-01
     SERVER=your-server
     DATABASE=your-database
     USERNAME1=your-username
     PASSWORD=your-password
     FHIR_SERVER_URL=https://your-fhir-server/fhir
     FHIR_AUTH_TOKEN=your-token
     ```
   - **Example `local.settings.json`**:
     ```json
     {
       "IsEncrypted": false,
       "Values": {
         "AzureWebJobsStorage": "UseDevelopmentStorage=true",
         "SqlConnectionString": "DRIVER={ODBC Driver 18 for SQL Server};SERVER=your-server;PORT=1433;DATABASE=your-database;UID=your-username;PWD=your-password;Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;",
         "FHIR_SERVER_URL": "https://your-fhir-server/fhir",
         "FHIR_AUTH_TOKEN": "your-token"
       }
     }
     ```

3. **`host.json`** (Optional):
   - Configures function app settings (e.g., logging, extensions).
   - **Example**:
     ```json
     {
       "version": "2.0",
       "logging": {
         "applicationInsights": {
           "samplingSettings": {
             "isEnabled": true
           }
         }
       },
       "extensions": {
         "sql": {
           "connectionStringSetting": "SqlConnectionString"
         }
       }
     }
     ```

4. **`requirements.txt`**:
   - Lists Python dependencies.
   - **Example**:
     ```
     azure-functions==1.17.0
     openai==1.14.0
     requests==2.31.0
     pyodbc==5.1.0
     python-dotenv==1.0.0
     ```

### Parameters

- **`changes` (str)**:
  - Passed to the SQL trigger function as a JSON string containing a list of change events.
  - **Example from Logs**:
    ```json
    [
      {
        "Operation": 0,
        "Item": {
          "id": "2820eb1c-f63c-4178-8b34-a21ebd8cb9e2",
          "user_id": "bfe7385c-e544-44b2-bb36-8463781be9e2",
          "sender": "user",
          "message": "Am tired",
          "date": "2025-03-13T00:00:00",
          "time": "1:33 PM",
          "created_at": "2025-03-13T13:33:23.389+01:00"
        }
      }
    ]
    ```
  - Contains `Operation` (e.g., 0 for INSERT) and `Item` (message details).

- **Environment Variables**:
  - Accessed via `os.getenv()` (e.g., `FHIR_SERVER_URL`, `FHIR_AUTH_TOKEN`).
  - Must be set in `.env` or `local.settings.json`.

### Coding Details

- **SQL Trigger Definition**:
  - Use `@app.sql_trigger` decorator with parameters:
    - `arg_name`: Name of the parameter (e.g., `"changes"`).
    - `table_name`: Target SQL table (e.g., `"dbo.messages"`).
    - `connection_string_setting`: Name of the setting containing the SQL connection string (e.g., `"SqlConnectionString"`).
  - **Example**:
    ```python
    @app.sql_trigger(arg_name="changes", table_name="dbo.messages", connection_string_setting="SqlConnectionString")
    def chat_with_knowbot_sql_trigger(changes: str) -> None:
        # Logic here
    ```

- **Processing Logic**:
  - Parse `changes` with `json.loads(changes)`.
  - Iterate over `changes_list` to handle each change.
  - Check `operation` (e.g., `== 0` for INSERT) and `item` fields.
  - Filter `sender == "user"` and process mood analysis/FHIR upload.

- **FHIR Upload**:
  - Use `requests.post` with `FHIR_SERVER_URL`, headers, and JSON payload.
  - Handle exceptions with `requests.exceptions.RequestException`.

## Why It Didn’t Work Initially

1. **`"Operation"` vs. `"operation"` Error**:
   - **Cause**: The SQL trigger provided JSON with `"Operation"` (uppercase), but the code checked for `"operation"` (lowercase) using `change.get("operation")`. Since no match was found, `operation` was `None`, triggering the `if not operation:` condition and skipping the message.
   - **Evidence**: Logs showed `"Change missing 'operation' field"` despite valid `Operation: 0`.
   - **Fix**: Added fallback with `change.get("operation") or change.get("Operation")` to handle case sensitivity.

2. **Early Exit**:
   - **Cause**: The early exit due to the JSON parsing mismatch prevented the code from reaching the sender filtering, mood analysis, and FHIR upload steps, creating the appearance of an infinite loop as the trigger kept firing without processing.
   - **Evidence**: No logs beyond `"Change missing 'operation' field"`.
   - **Fix**: Corrected JSON parsing and ensured the loop completed for each batch.

3. **Environment Misconfiguration**:
   - **Cause**: Potential issues with `FHIR_SERVER_URL` (e.g., `http://3.142.231.50:80`) and `FHIR_AUTH_TOKEN` caused FHIR failures when processing would have occurred.
   - **Evidence**: Documents showed "Sorry, you have been blocked" and "Page not found".
   - **Fix**: Recommended verifying and updating environment variables.

## Final Notes

- **Testing**: Continue testing with new messages and monitor logs for FHIR success.
- **Optimization**: Consider adding a database-level filter (e.g., a view with `WHERE sender = 'user'`) if supported by your SQL trigger setup.
- **Support**: Share logs or errors if further issues arise!
